{
    "tags": [
        "c",
        "integer",
        "bitwise-operators",
        "bit",
        "operation"
    ],
    "owner": {
        "reputation": 29,
        "user_id": 12165736,
        "user_type": "registered",
        "profile_image": "https://i.stack.imgur.com/FsK4H.jpg?s=128&g=1",
        "display_name": "zackmusgrave",
        "link": "https://stackoverflow.com/users/12165736/zackmusgrave"
    },
    "comment_count": 7,
    "is_answered": true,
    "view_count": 40,
    "answer_count": 1,
    "score": 1,
    "last_activity_date": 1602535196,
    "creation_date": 1602531639,
    "question_id": 64324377,
    "upvoted": true,
    "downvoted": true,
    "link": "https://stackoverflow.com/questions/64324377/how-to-inverse-a-positive-integer-in-c-without-or-operators",
    "title": "How to inverse a positive integer in C without * or - operators?",
    "body": "<p>Hello I am trying to write a function for my lab which requires me to inverse a positive number with restricted operators. The operators allowed are: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>\n<p>My initial approach was to double x using addition: x + x and then subtracting that from x to get the inverse, but was roadblocked due to the operator restrictions. I am rather new to C and trying to learn, if someone could provide me with the ideology behind performing this operation I would greatly appreciate it.</p>\n"
}
